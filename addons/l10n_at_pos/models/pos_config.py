from datetime import datetime
from odoo import fields, models, api, _
from odoo.exceptions import ValidationError
from odoo.addons.l10n_at_pos.models.fiskaly_client import FiskalyClient, fiskaly_iap_rpc


class PosConfig(models.Model):
    _inherit = 'pos.config'

    l10n_at_cash_regid = fields.Char(string="Fiskaly Cash Register ID", readonly=True, copy=False, help="Cash register identifier for this config generated by fiskaly")

    @api.model_create_multi
    def create(self, vals_list):
        configs = super().create(vals_list)
        for config in configs:
            if config.company_id.l10n_at_fiskaly_access_token:
                if not config.company_id.l10n_at_is_fon_authenticated:
                    raise ValidationError(_("Please Authenticate FON first from the company form."))
                config._configure_register()
        return configs

    def _configure_register(self):
        self.ensure_one()
        fiskaly_client = FiskalyClient(self.company_id, self.company_id.l10n_at_fiskaly_api_key, self.company_id.l10n_at_fiskaly_api_secret)
        self.company_id._verify_required_fields()

        # For each company there should be only single SCU with initialized state
        if not self.company_id.l10n_at_pos_company_scuid:
            scuid = fiskaly_client.setup_scu({"legal_entity_id": {"vat_id": self.company_id.vat}}, self.company_id.l10n_at_fiskaly_access_token)
            self.company_id.l10n_at_pos_company_scuid = scuid
            self.env.cr.commit()

        # Now create register on fiskaly (no need to check for config)
        new_reg_id = fiskaly_client.setup_cash_reg(self.company_id.l10n_at_fiskaly_access_token)
        self.l10n_at_cash_regid = new_reg_id
        self.env.cr.commit()

        # Now update these data if company managed by us
        if self.company_id.l10n_at_is_odoo_managed_org:
            data = {
                "db_uuid": self.env['ir.config_parameter'].sudo().get_param('database.uuid'),
                "company_id": self.company_id.id,
                "fiskaly_reg_id": self.l10n_at_cash_regid,
                "company_scuid": self.company_id.l10n_at_pos_company_scuid,
            }
            fiskaly_iap_rpc(self.company_id, "/update_reg", data)

    def print_dep7_report(self, start_date, end_date):
        fiskaly_client = FiskalyClient(self.company_id, self.company_id.l10n_at_fiskaly_api_key, self.company_id.l10n_at_fiskaly_api_secret)
        starting_time, ending_time = (int(dt.timestamp()) for dt in (start_date, end_date))

        report_duration_msg = _("This is the entire Report of this cash register")
        if ending_time - starting_time != 0:
            report_duration_msg = "This is the Report of this cash register from %s to %s" % (start_date, end_date)

        report_data = {"config_reports": [], "report_duration": report_duration_msg}

        for config in self:
            if config.l10n_at_cash_regid:
                audit_report_response = fiskaly_client.get_dep_data(config.company_id.l10n_at_fiskaly_access_token, config.l10n_at_cash_regid, starting_time, ending_time)
                report_data["config_reports"].append({config.name: audit_report_response})

        return self.env.ref('l10n_at_pos.fiskaly_register_report').report_action(self, data=report_data)

    def fetch_fiskaly_closing_receipt_data(self, selection_date, period):
        self.ensure_one()
        fiskaly_client = FiskalyClient(self.company_id, self.company_id.l10n_at_fiskaly_api_key, self.company_id.l10n_at_fiskaly_api_secret)
        selected_date = datetime.strptime(selection_date, "%Y-%m")

        current_date = datetime.now()
        year_diff = current_date.year - selected_date.year
        month_diff = current_date.month - selected_date.month

        # Calculate the total difference in months
        total_month_diff = (year_diff * 12 + month_diff)
        offset = total_month_diff if period == "monthly" else year_diff
        receipt_type = "MONTHLY_CLOSE" if period == "monthly" else "YEARLY_CLOSE"
        return fiskaly_client.get_closing_receipt(self.l10n_at_cash_regid, receipt_type, offset, self.company_id.l10n_at_fiskaly_access_token)


class ReportL10nAtPosConfigAuditTemplate(models.AbstractModel):
    _name = 'report.l10n_at_pos.report_config_audit_template'
    _description = 'Get DEP7 Report for Session.'

    @api.model
    def _get_report_values(self, docids, data=None):
        return {
            'data': data,
            'docs': self.env['res.company'].browse(self.env.company.id),
        }
